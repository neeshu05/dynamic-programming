Given a value N, find the number of ways to make change for N cents, if we have infinite supply of each of S = { S1, S2, .. , SM } valued coins.


Example 1:

Input:
n = 4 , m = 3
S[] = {1,2,3}
Output: 4
Explanation: Four Possible ways are:
{1,1,1,1},{1,1,2},{2,2},{1,3}.


class Solution:
    def count(self, coins,m,n):
        memo = {}
        def helper(indx,amount):
            if (indx,amount) in memo:
                return memo[(indx,amount)]
            if indx == 0:
                if amount%coins[indx] == 0:
                    return 1
                else:
                    return 0
            notpick = 0 + helper(indx-1,amount)
            pick = 0
            if coins[indx] <= amount:
                pick = helper(indx,amount - coins[indx])
            memo[(indx,amount)] = pick + notpick
            return memo[(indx,amount)]
        return helper(m-1,n)
