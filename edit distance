

class Solution:
	def editDistance(self, s, t):
		#tabulation
		m = len(s)
        n = len(t)
		dp = [[0 for _ in range(m+1)] for _ in range(n+1)]
    
    # if t == "" then we have to delete every character from s 
		for i in range(n+1):
		    dp[i][0] = i
		for j in range(m+1):
		    dp[0][j] = j
		#print(dp)
		
		for i in range(1,n+1):
		    for j in range(1,m+1):
		        if t[i-1] == s[j-1]:
		            dp[i][j] = dp[i-1][j-1]
		        else:                  #replace          #delete    #insert
		            dp[i][j] = 1 + min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]))
		return dp[n][m]
		
		
		#memoization
		#helper(i,j) == signifies the minimum number of operations to convert s1 to s2
		# till i,j in indices
		memo = {}
		def helper(indx1,indx2):
		    #insert
		    if indx1 < 0:
		        return indx2+1
		   
		    if indx2 < 0:
		        return indx1+1
		    
		    if (indx1,indx2) in memo:
		        return memo[(indx1,indx2)]
		    #if character matches then increment both pointers
		    if s[indx1] == t[indx2]:
		        return helper(indx1 - 1,indx2 - 1)
		        
		    else:                              #replace                     #delete                #insert
		        memo[(indx1,indx2)] = 1 + min(helper(indx1-1,indx2-1),min(helper(indx1-1,indx2),helper(indx1,indx2-1)))
            return memo[(indx1,indx2)]
        return helper(len(s)-1,len(t)-1)

