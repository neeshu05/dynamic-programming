
Given an array cost[] of positive integers of size N and an integer W, cost[i] represents the cost of ‘i’ kg packet of oranges, 
the task is to find the minimum cost to buy W kgs of oranges. If it is not possible to buy exactly W kg oranges then the output will be -1

Note:
1. cost[i] = -1 means that ‘i’ kg packet of orange is unavailable
2. It may be assumed that there is infinite supply of all available packet types.

Example 1:

Input: N = 5, arr[] = {20, 10, 4, 50, 100}
W = 5
Output: 14
Explanation: choose two oranges to minimize 
cost. First orange of 2Kg and cost 10. 
Second orange of 3Kg and cost 4.


import sys
sys.setrecursionlimit(10**6)
class Solution:
    def minimumCost(self, cost, n, W):
      #memoization
      
        memo = {}
        def helper(indx,amount):
            if (indx,amount) in memo:
                return memo[(indx,amount)]
            if amount < 0 or indx < 0:
                return float('inf')
            if amount == 0:
                return 0
            notpick = helper(indx - 1,amount)
            pick = cost[indx] + helper(indx,amount - indx + 1)
            memo[(indx,amount)] = min(pick,notpick)
            return memo[(indx,amount)]
        return helper(len(cost)-1,W) if helper(len(cost)-1,W) != float('inf') else -1
    
        #tabulation
        val = list()
        wt= list()
        size = 0
        for i in range(n):
            if (cost[i] != -1):
                val.append(cost[i])
                wt.append(i+1)
                size += 1
     
        n = size
        
        min_cost = [[0 for i in range(W+1)] for j in range(n+1)]
        for i in range(W+1):
            min_cost[0][i] = float('inf')
        for i in range(1, n+1):
            min_cost[i][0] = 0
        for i in range(1, n+1):
            for j in range(1, W+1):
                if (wt[i-1] > j):
                    min_cost[i][j] = min_cost[i-1][j]
                else:
                    min_cost[i][j] = min(min_cost[i-1][j],
                        min_cost[i][j-wt[i-1]] + val[i-1])
        if(min_cost[n][W] == float('inf')):
            return -1
        else:
            return min_cost[n][W]
