Given an array of integers, find the length of the longest (strictly) increasing subsequence from the given array.

Example 1:

Input:
N = 16
A[]={0,8,4,12,2,10,6,14,1,9,5
     13,3,11,7,15}
Output: 6
Explanation:Longest increasing subsequence
0 2 6 9 13 15, which has length 6


from bisect import bisect_left
class Solution:
    #Function to find length of longest increasing subsequence.
    def longestSubsequence(self,arr,n):
        #binary
        temp = [a[0]]
        for i in range(1,n):
            if a[i] > temp[-1]:
                temp.append(a[i])
            else:
                indx = bisect_left(temp,a[i])
                temp[indx] = a[i]
        return len(temp)
        
        #express in terms of indx
        #explore all possibility
        #return max(take,nottake)
        #prev == indx
        #helper(indx,prev) = return the lenght of lis starting from indx 
        #whose element is at prev
        memo = {}
        def helper(indx,prev):
            if (indx,prev) in memo:
                return memo[(indx,prev)]
            if indx == n:
                return 0
            nottake = helper(indx+1,prev)
            take = 0
            if prev == -1 or arr[indx] > arr[prev]:
                take = 1 + helper(indx + 1,indx)
            memo[(indx,prev)] = max(take,nottake)
            return memo[(indx,prev)]
        return helper(0,-1) 
