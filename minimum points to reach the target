Given a grid of size M*N with each cell consisting of an integer which represents points. 
We can move across a cell only if we have positive points. Whenever we pass through a cell, 
points in that cell are added to our overall points, the task is to find minimum initial points
to reach cell (m-1, n-1) from (0, 0) by following these certain set of rules :
 
1. From a cell (i, j) we can move to (i + 1, j) or (i, j + 1).
2. We cannot move from (i, j) if your overall points at (i, j) are <= 0.
3. We have to reach at (n-1, m-1) with minimum positive points i.e., > 0.

Example 1:

Input: M = 3, N = 3 
       arr[][] = {{-2,-3,3}, 
                  {-5,-10,1}, 
                  {10,30,-5}}; 

Output: 7
Explanation: 7 is the minimum value to
reach the destination with positive
throughout the path. Below is the path.
(0,0) -> (0,1) -> (0,2) -> (1, 2) -> (2, 2)
We start from (0, 0) with 7, we reach
(0, 1) with 5, (0, 2) with 2, (1, 2)
with 5, (2, 2) with and finally we have
1 point (we needed greater than 0 points
at the end).


class Solution:
	def minPoints(self, points, m, n):
	    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]
	    
	    if points[m-1][n-1] >= 0:
	        dp[m-1][n-1] = 1
	    else:
	        dp[m-1][n-1] = abs(points[m-1][n-1]) + 1
	   
	    for i in range(m-1,-1,-1):
	        dp[i][n-1] = max(dp[i+1][n-1] - points[i][n-1], 1) 
	    for j in range(n-1,-1,-1): 
	        dp[m-1][j] = max(dp[m-1][j+1] - points[m-1][j], 1)
	   
	    
	    for i in range(m-2,-1,-1):
	        for j in range(n-2,-1,-1):
	            ans = min(dp[i+1][j],dp[i][j+1])
	            dp[i][j] = max(ans - points[i][j], 1)   
	           
	    return dp[0][0]
	    
	    memo = {}
	    def helper(r,c):
	        if (r,c) in memo:
	            return memo[(r,c)]
	        if r >= m or c >= n:
	            return float('inf')
	        if r == m-1 and c == n-1:
	            if points[r][c] >= 0:
	                return 1
	            else:
	                return abs(points[r][c]) + 1
	        ans = min(helper(r+1,c),helper(r,c+1))
	        memo[(r,c)] = max(ans - points[r][c], 1)
	        return memo[(r,c)]
	    return helper(0,0)
