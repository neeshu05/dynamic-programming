Given an array of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum. 

Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 9
Output: 1 
Explanation: Here there exists a subset with
sum = 9, 4+3+2 = 9.


set[]={3, 4, 5, 2}

sum=9

(x, y)= 'x' is the left number of elements,

'y' is the required sum

  

              (4, 9)

             {True}

           /        \  

        (3, 6)       (3, 9)

               

        /    \        /   \ 

     (2, 2)  (2, 6)   (2, 5)  (2, 9)

     {True}  

     /   \ 

  (1, -3) (1, 2)  

{False}  {True} 

         /    \

       (0, 0)  (0, 2)

       {True} {False}


✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔✔



def isSubsetSum(set, n, sum):

    # Base Cases
    if (sum == 0):
        return True
    if (n == 0):
        return False

    # If last element is greater than
    # sum, then ignore it
    if (set[n - 1] > sum):
        return isSubsetSum(set, n - 1, sum)

    # else, check if sum can be obtained
    # by any of the following
    # (a) including the last element
    # (b) excluding the last element
    
    return isSubsetSum(set, n-1, sum) or isSubsetSum(set, n-1, sum-set[n-1])
    
    
 class Solution:
    def isSubsetSum (self, N, arr, sum):
        dp = [[False for _ in range(sum + 1)] for _ in range(N+1)]
        
        #if sum == 0
        for i in range(N+1):
            dp[i][0] = True
            
        #if set if empty()
        for j in range(1,sum + 1):
            dp[0][j] = False
        
        for i in range(1,N+1):
            for j in range(1,sum + 1):
                #ignore
                if j < arr[i-1]:
                    dp[i][j] = dp[i-1][j]
                else:
                    dp[i][j] = dp[i-1][j] or dp[i-1][j - arr[i-1]]
        return dp[N][sum]
