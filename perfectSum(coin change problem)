Given an array arr[] of non-negative integers and an integer sum, the task is to count all subsets of the given array with a sum equal to a given sum.

Note: Answer can be very large, so, output answer modulo 109+7

Example 1:

Input: N = 6, arr[] = {2, 3, 5, 6, 8, 10}
       sum = 10
Output: 3
Explanation: {2, 3, 5}, {2, 8}, {10}


class Solution:
$tabulation
	def perfectSum(self, arr, n, sum):
	    dp = [[0 for i in range(sum+1)] for j in range(n+1)]
	    #if sum == 0 and we have elements
	    for i in range(n+1):
	        dp[i][0] = 1
	    for i in range(1,n+1):
	        for j in range(sum+1):
	            if arr[i-1] <= j:
	                dp[i][j] = (dp[i-1][j - arr[i-1]] + dp[i-1][j])%(10**9 + 7)
	            else:
	                dp[i][j] = dp[i-1][j]
	    return dp[n][sum]
	    
	  #memoization  
	  memo = {}
		def helper(indx,sum):
		    if (indx,sum) in memo:
		        return memo[(indx,sum)]
		    if indx == 0:
            #edge cases
		        if sum == 0 and sum == arr[0]:
		            return 2
		        elif sum == 0 or sum == arr[0]:
		            return 1
		        return 0
		    notpick = helper(indx-1,sum)
		    pick = 0
		    if sum >= arr[indx]:
		        pick = helper(indx-1,sum-arr[indx])
		    memo[(indx,sum)] = (pick + notpick)%(10**9 + 7)
		    return memo[(indx,sum)]
	    return helper(len(arr)-1,sum)
