Given two arrays A and B of positive integers of size N and M where N >= M, the task is to maximize 
the dot product by inserting zeros in the second array but you cannot disturb the order of elements.

Dot Product of array A and B of size N is A[0]*B[0] + A[1]*B[1]+....A[N]*B[N].

Example 1:

Input: N = 5, A[] = {2, 3, 1, 7, 8} 
       M = 3, B[] = {3, 6, 7}
Output: 107
Explanation: We get maximum dot product 
after inserting 0 at first and third 
positions in second array.
Maximum Dot Product : = A[i] * B[j] 
2*0 + 3*3 + 1*0 + 7*6 + 8*7 = 107


class Solution:
	def maxDotProduct(self, n, m, arr1, arr2):
	    
	    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]
	    
	    for i in range(1,m+1):
	        for j in range(i,n+1):
	            not_zero = arr2[i-1]*arr1[j-1] + dp[i-1][j-1]
                zero = dp[i][j-1]
                dp[i][j] = max(zero , not_zero)
        return dp[m][n]
	    
	    
		memo = {}
		def solve(p1 ,p2):
		    if (p1,p2) in memo:
		        return memo[(p1,p2)]
            if (p1 == n and p2 == m) or (p2 == m):
                return 0
                
            #not a valid case
            if (p1 == n):
                return (float('-inf'))
            
            not_zero = arr1[p1]*arr2[p2] + solve(p1+1 ,p2+1)
            zero = solve(p1+1, p2)
            memo[(p1,p2)] = max(zero , not_zero)
            return memo[(p1,p2)]
        return solve(0,0)
