Given a string str of length N, you have to find number of palindromic subsequence (need not necessarily be distinct)
which could be formed from the string str.
Note: You have to return the answer module 109+7

Example 1:

Input: 
Str = "abcd"
Output: 
4
Explanation:
palindromic subsequence are : "a" ,"b", "c" ,"d"


class Solution:
    # Your task is to complete this function
    # Function should return an integer
    def helper(self,s,dp,i,j):
        if i>j:
            return 0
        if i == j:
            return 1
        if dp[i][j]!=-1:
            return dp[i][j]
        #aba
        if s[i]==s[j]:
            dp[i][j]= 1+ (self.helper(s,dp,i+1,j)%1000000007) + (self.helper(s,dp,i,j-1)%1000000007)
        #abc
        else:
            dp[i][j]= (self.helper(s,dp,i,j-1)%1000000007)+(self.helper(s,dp,i+1,j)%1000000007) - (self.helper(s,dp,i+1,j-1)%1000000007)
        return dp[i][j]%1000000007
        
    def countPs(self,string):
        n=len(string)
        dp=[]
        for i in range(n):
            t=[-1]*n
            dp.append(t)
        return self.helper(string,dp,0,n-1)%1000000007
