You are given N pairs of numbers. In every pair, the first number is always smaller than the second number. 
A pair (c, d) can follow another pair (a, b) if b < c. Chain of pairs can be formed in this fashion. 
You have to find the longest chain which can be formed from the given set of pairs.  

Example 1:

Input:
N = 5
P[] = {5  24 , 39 60 , 15 28 , 27 40 , 50 90}
Output: 3
Explanation: The given pairs are { {5, 24}, {39, 60},
{15, 28}, {27, 40}, {50, 90} },the longest chain that
can be formed is of length 3, and the chain is
{{5, 24}, {27, 40}, {50, 90}}



class Pair(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b

def maxChainLen(arr, n):
    #helper(indx) == it signifies that till indx the maxlen of the chain
    arr = sorted(arr,key = lambda x: x.a)
    memo = {}
    def helper(indx):
        if indx in memo:
            return memo[indx]
        if indx == len(arr):
            return 0
        j = indx + 1
        while j < n and arr[indx].b >= arr[j].a:
            j += 1
        pick = 1 + helper(j)
        notpick = helper(indx+1)
        memo[indx] = max(pick,notpick)
        return memo[indx]
    return helper(0)
